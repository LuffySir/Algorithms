总结：

1、字符串次数的问题：
    Python可以考虑使用collection.Count()方法计数
    Java可以考虑用freq[s.charAt(i)-'a']++的方法计数
    可以考虑使用异或(两次相同的为0，且与顺序无关)

2、二叉树遍历问题：
    考虑使用stack和queue（collections.deque双向队列）

3、LinkedList问题：
    善于利用dummy记录头节点
    判断是否存在环：一个节点走得快，另一个走的慢，如果两个节点会相等，则存在环




python 函数：
1、bin(x)
    将整数x转换为二进制字符串
    >>> bin(521)
    #这里的显示结果形式与我们平时习惯有些差别，主要是前面多了0b，这是表示二进制的意思。
    '0b1000001001'
2、count()方法
    用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。
    str.count(sub, start= 0,end=len(string))
3、list.append()
    a = a.append()  # a 将为 None
    # 可用a = a + []
4、list
    pre = beh
    beh.append()
    # pre 和 beh将指向同一对象，始终相等，因此可使用3中方法避免这种情况
5、timeit
    timeit(stmt='pass', setup='pass', timer=<defaulttimer>, number=1000000)

           返回：
                返回执行stmt这段代码number遍所用的时间，单位为秒，float型
           参数：
                stmt：要执行的那段代码
                setup：执行代码的准备工作，不计入时间，一般是import之类的
                timer：这个在win32下是time.clock()，linux下是time.time()，默认的，不用管
                number：要执行stmt多少遍

    repeat(stmt='pass', setup='pass', timer=<defaulttimer>, repeat=3, number=1000000)
           这个函数比timeit函数多了一个repeat参数而已，表示重复执行timeit这个过程多少遍，返回一个列表，表示执行每遍的时间
    当然，为了方便，python还用了一个Timer类，Timer类里面的函数跟上面介绍的两个函数是一样一样的

    t = timeit.Timer('s[:8] == "subject:"', 's="subject: xxx"')
    t.timeit()
    得到执行该语句的运行时间
